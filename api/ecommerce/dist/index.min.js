var D=Object.create;var g=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,J=Object.prototype.hasOwnProperty;var B=(t,s,r,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of W(s))!J.call(t,o)&&o!==r&&g(t,o,{get:()=>s[o],enumerable:!(e=v(s,o))||e.enumerable});return t};var i=(t,s,r)=>(r=t!=null?D(A(t)):{},B(s||!t||!t.__esModule?g(r,"default",{value:t,enumerable:!0}):r,t));var _=i(require("@groupclaes/fastify-elastic")),I=i(require("@groupclaes/fastify-authhandler"));var f=i(require("mssql"));var w=require("mssql"),b=require("./config"),d=new Map,a={get:async t=>{if(!d.has(t)){if(!b.mssql[t])throw new Error(`Configuration for pool '${t}' does not exist!`);let s=new w.ConnectionPool(b.mssql[t]),r=s.close.bind(s);s.close=(...e)=>(d.delete(t),r(...e)),d.set(t,await s.connect())}return d.get(t)},closeAll:()=>Promise.all(Array.from(d.values()).map(t=>t.then(s=>s.close())))};var E="brabopak",m=class{constructor(){this.schema="[ecommerce]."}async getTree(s,r="nl"){try{let e=new f.default.Request(await a.get(E));e.input("user_id",f.default.Int,s),e.input("culture",f.default.VarChar,r);let o=await e.execute(this.schema+"[usp_getCategoriesTree]");return o.recordset.length>0?o.recordset[0]:void 0}catch(e){throw e}}};var P=async(t,s)=>{try{let r=new m,e=t.token||{sub:null},o=t.query.culture??"nl";return await r.getTree(e.sub,o)}catch(r){return s.status(500).send(r)}};var h=i(require("@groupclaes/oe-connector"));var u=i(require("mssql"));var C="brabopak",c=class{constructor(){this.schema="[ecommerce]."}async get(s,r,e="nl"){try{let o=new u.default.Request(await a.get(C));o.input("user_id",u.default.Int,r),o.input("usercode",u.default.Int,s),o.input("culture",u.default.VarChar,e);let n=await o.execute(this.schema+"[usp_getCart]");return n.recordset.length>0?n.recordset[0]:void 0}catch(o){throw o}}async updateProduct(s,r,e,o){try{let n=new u.default.Request(await a.get(C));return n.input("user_id",u.default.Int,r),n.input("usercode",u.default.Int,s),n.input("product_id",u.default.Int,e),n.input("amount",u.default.SmallInt,o),(await n.execute(this.schema+"[usp_updateCartProduct]")).rowsAffected[0]>0}catch(n){throw n}}};var R=async(t,s)=>{try{let r=new c,e=t.token||{sub:null},o=t.query.usercode,n=t.query.culture??"nl";return await r.get(o,e.sub,n)}catch(r){return s.status(500).send(r)}},q=async(t,s)=>{try{let r=new c,e=t.token||{sub:null},o=t.query.usercode,n=t.query.culture??"nl";if(e.sub){let l=await r.updateProduct(o,e.sub,t.body.product_id,t.body.quantity)}return await r.get(o,e.sub,n)}catch(r){return s.status(500).send(r)}},x=async(t,s)=>{try{if((t.token||{sub:null}).sub){let e=t.body;console.debug(e);let o={dsOrders:{ttOrdMst:[{CustNum:e.customer.id,DelvAdr:e.customer.address_id,CustCol:e.deliveryInfo.method!=="transport",ComplDelv:e.deliveryInfo.option!=="parts",CustRef:e.invoiceInfo.reference,DelvDate:void 0,NextDelv:e.invoiceInfo.nextDate,OrdWay:"B2B"}],ttOrdDtl:e.products.map((l,k)=>({ItemNum:l.itemnum,Qty:l.quantity,SalUnit:l.unit,TmpOrdLine:k})),ttOrdMstText:[{InfoText:e.invoiceInfo.comment}]}};h.default.configure({c:!1});let n=await h.default.run("post_order.p",["bra",o,void 0],{tw:-1,simpleParameters:!0});if(n&&n.status===200&&n.result)return{success:!0}}return s.status(401).send({error:"Unauthorized!"})}catch(r){return t.log.fatal(t.body,"failed to send order!"),s.status(500).send(r)}};var p=i(require("mssql"));var N="brabopak",y=class{constructor(){this.schema="[ecommerce]."}async get(s,r,e="nl"){try{let o=new p.default.Request(await a.get(N));o.input("user_id",p.default.Int,r),o.input("usercode",p.default.Int,s),o.input("culture",p.default.VarChar,e);let n=await o.execute(this.schema+"[usp_getDashboard]");return n.recordset.length>0?n.recordsets:void 0}catch(o){throw o}}};var T=async(t,s)=>{try{let r=new y,e=t.token||{sub:null},o=t.query.culture??"nl";return await r.get(t.query.usercode,e.sub,o)}catch(r){return s.status(500).send(r)}};var F=[{method:"GET",url:"/menu",handler:P},{method:"GET",url:"/carts",handler:R,requiredPermissions:[]},{method:"POST",url:"/carts",handler:x,requiredPermissions:[]},{method:"PUT",url:"/carts/products",handler:q,requiredPermissions:[]},{method:"GET",url:"/dashboard",handler:T,requiredPermissions:[]}];var G=require("./config"),S=async()=>{let t=new _.default(G.wrapper);t.addAuthPreHandler(I.default,"token"),t.routeMultiple(F),await t.start()};S();
